{"ast":null,"code":"import axios, { AxiosError } from \"axios\";\nimport { atom, selector, selectorFamily } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\nconst {\n  persistAtom\n} = recoilPersist();\n\n// kakao API 호출\nconst KAKAO_API_KEY = process.env.REACT_APP_KAKAO_API_KEY;\n\n// 입력한 검색어\nexport const searchInfoState = atom({\n  key: \"searchInfoState\",\n  default: \"\"\n});\n\n// 하나의 책이 가진 고유의 값(isMarked와 isWatched 값 관리) atom 으로 전역적으로 상태관리\nexport const bookDetailState = atom({\n  key: \"bookDetailState\",\n  default: [],\n  effects_UNSTABLE: [persistAtom]\n});\n\n// 검색 api 호출\nexport const searchApiSelector = selectorFamily({\n  key: \"searchApiSelector\",\n  get: search => async ({\n    get\n  }) => {\n    // API 호출\n    try {\n      const res = await axios({\n        method: \"get\",\n        baseURL: \"https://dapi.kakao.com/v3/search/book\",\n        headers: {\n          Authorization: \"KakaoAK \" + KAKAO_API_KEY\n        },\n        params: {\n          query: search,\n          size: 50,\n          target: [\"title\", \"person\"]\n        }\n      });\n      return res.data.documents;\n    } catch (error) {\n      if (error instanceof AxiosError) {\n        var _error$response;\n        if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 400) {\n          console.log(error);\n        }\n      }\n    }\n  }\n});\nexport const detailBookSelector = selector({\n  key: \"detailBookSelector\",\n  get: ({\n    getCallback\n  }) => {\n    const upDateDetailClick = getCallback(({\n      set,\n      snapshot\n    }) => async bookCode => {\n      const details = await snapshot.getPromise(bookDetailState);\n      const isDuplicated = details.some(v => console.log(Object.keys(v)) === bookCode);\n      console.log(isDuplicated);\n      if (isDuplicated !== -1) {\n        // bookDetailState 이 안에 이미 저장되어 있다면?\n        return false;\n      } else {\n        // 새로운 책 추가\n        const newBook = {\n          [String(bookCode)]: {\n            isMarked: !details.isMarked,\n            isWatched: true\n          }\n        };\n        const updatedDetails = [...details, newBook]; // 새로운 책 추가\n        set(bookDetailState, updatedDetails);\n      }\n    });\n    return upDateDetailClick;\n  }\n});","map":{"version":3,"names":["axios","AxiosError","atom","selector","selectorFamily","recoilPersist","persistAtom","KAKAO_API_KEY","process","env","REACT_APP_KAKAO_API_KEY","searchInfoState","key","default","bookDetailState","effects_UNSTABLE","searchApiSelector","get","search","res","method","baseURL","headers","Authorization","params","query","size","target","data","documents","error","_error$response","response","status","console","log","detailBookSelector","getCallback","upDateDetailClick","set","snapshot","bookCode","details","getPromise","isDuplicated","some","v","Object","keys","newBook","String","isMarked","isWatched","updatedDetails"],"sources":["/Users/zoe/Documents/Wishread/src/recoil/books.ts"],"sourcesContent":["import axios, { AxiosError } from \"axios\";\nimport { BookDTO } from \"components/types/searchType\";\nimport { DefaultValue, atom, selector, selectorFamily } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\n\nconst { persistAtom } = recoilPersist();\n\n// kakao API 호출\nconst KAKAO_API_KEY = process.env.REACT_APP_KAKAO_API_KEY;\n\n// 입력한 검색어\nexport const searchInfoState = atom({\n  key: \"searchInfoState\",\n  default: \"\",\n});\n\n// 하나의 책이 가진 고유의 값(isMarked와 isWatched 값 관리) atom 으로 전역적으로 상태관리\nexport const bookDetailState = atom({\n  key: \"bookDetailState\",\n  default: [],\n  effects_UNSTABLE: [persistAtom],\n});\n\n// 검색 api 호출\nexport const searchApiSelector = selectorFamily({\n  key: \"searchApiSelector\",\n  get:\n    (search) =>\n    async ({ get }) => {\n      // API 호출\n      try {\n        const res = await axios({\n          method: \"get\",\n          baseURL: \"https://dapi.kakao.com/v3/search/book\",\n          headers: {\n            Authorization: \"KakaoAK \" + KAKAO_API_KEY,\n          },\n          params: {\n            query: search,\n            size: 50,\n            target: [\"title\", \"person\"],\n          },\n        });\n        return res.data.documents;\n      } catch (error) {\n        if (error instanceof AxiosError) {\n          if (error.response?.status === 400) {\n            console.log(error);\n          }\n        }\n      }\n    },\n});\n\nexport const detailBookSelector = selector({\n  key: \"detailBookSelector\",\n  get: ({ getCallback }) => {\n    const upDateDetailClick = getCallback(\n      ({ set, snapshot }) =>\n        async (bookCode) => {\n          const details = await snapshot.getPromise(bookDetailState);\n          const isDuplicated = details.some(\n            (v: BookDTO) => console.log(Object.keys(v) )=== bookCode\n          );\n          console.log(isDuplicated);\n          if (isDuplicated !== -1) {\n            // bookDetailState 이 안에 이미 저장되어 있다면?\n            return false;\n          } else {\n            // 새로운 책 추가\n            const newBook = {\n              [String(bookCode)]: {\n                isMarked: !details.isMarked,\n                isWatched: true,\n              },\n            };\n            const updatedDetails = [...details, newBook]; // 새로운 책 추가\n            set(bookDetailState, updatedDetails);\n          }\n        }\n    );\n    return upDateDetailClick;\n  },\n});\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AAEzC,SAAuBC,IAAI,EAAEC,QAAQ,EAAEC,cAAc,QAAQ,QAAQ;AACrE,SAASC,aAAa,QAAQ,gBAAgB;AAE9C,MAAM;EAAEC;AAAY,CAAC,GAAGD,aAAa,CAAC,CAAC;;AAEvC;AACA,MAAME,aAAa,GAAGC,OAAO,CAACC,GAAG,CAACC,uBAAuB;;AAEzD;AACA,OAAO,MAAMC,eAAe,GAAGT,IAAI,CAAC;EAClCU,GAAG,EAAE,iBAAiB;EACtBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,eAAe,GAAGZ,IAAI,CAAC;EAClCU,GAAG,EAAE,iBAAiB;EACtBC,OAAO,EAAE,EAAE;EACXE,gBAAgB,EAAE,CAACT,WAAW;AAChC,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMU,iBAAiB,GAAGZ,cAAc,CAAC;EAC9CQ,GAAG,EAAE,mBAAmB;EACxBK,GAAG,EACAC,MAAM,IACP,OAAO;IAAED;EAAI,CAAC,KAAK;IACjB;IACA,IAAI;MACF,MAAME,GAAG,GAAG,MAAMnB,KAAK,CAAC;QACtBoB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE,uCAAuC;QAChDC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAU,GAAGhB;QAC9B,CAAC;QACDiB,MAAM,EAAE;UACNC,KAAK,EAAEP,MAAM;UACbQ,IAAI,EAAE,EAAE;UACRC,MAAM,EAAE,CAAC,OAAO,EAAE,QAAQ;QAC5B;MACF,CAAC,CAAC;MACF,OAAOR,GAAG,CAACS,IAAI,CAACC,SAAS;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,IAAIA,KAAK,YAAY7B,UAAU,EAAE;QAAA,IAAA8B,eAAA;QAC/B,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACE,QAAQ,cAAAD,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;UAClCC,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;QACpB;MACF;IACF;EACF;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMM,kBAAkB,GAAGjC,QAAQ,CAAC;EACzCS,GAAG,EAAE,oBAAoB;EACzBK,GAAG,EAAEA,CAAC;IAAEoB;EAAY,CAAC,KAAK;IACxB,MAAMC,iBAAiB,GAAGD,WAAW,CACnC,CAAC;MAAEE,GAAG;MAAEC;IAAS,CAAC,KAChB,MAAOC,QAAQ,IAAK;MAClB,MAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,UAAU,CAAC7B,eAAe,CAAC;MAC1D,MAAM8B,YAAY,GAAGF,OAAO,CAACG,IAAI,CAC9BC,CAAU,IAAKZ,OAAO,CAACC,GAAG,CAACY,MAAM,CAACC,IAAI,CAACF,CAAC,CAAE,CAAC,KAAIL,QAClD,CAAC;MACDP,OAAO,CAACC,GAAG,CAACS,YAAY,CAAC;MACzB,IAAIA,YAAY,KAAK,CAAC,CAAC,EAAE;QACvB;QACA,OAAO,KAAK;MACd,CAAC,MAAM;QACL;QACA,MAAMK,OAAO,GAAG;UACd,CAACC,MAAM,CAACT,QAAQ,CAAC,GAAG;YAClBU,QAAQ,EAAE,CAACT,OAAO,CAACS,QAAQ;YAC3BC,SAAS,EAAE;UACb;QACF,CAAC;QACD,MAAMC,cAAc,GAAG,CAAC,GAAGX,OAAO,EAAEO,OAAO,CAAC,CAAC,CAAC;QAC9CV,GAAG,CAACzB,eAAe,EAAEuC,cAAc,CAAC;MACtC;IACF,CACJ,CAAC;IACD,OAAOf,iBAAiB;EAC1B;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}